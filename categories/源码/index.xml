<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码 on xjr99721的笔记</title>
    <link>https://xiangjiaowangzi.github.io/xjr99721/categories/%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in 源码 on xjr99721的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 15 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://xiangjiaowangzi.github.io/xjr99721/categories/%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RecyclerView源码分析</title>
      <link>https://xiangjiaowangzi.github.io/xjr99721/post/recyclerview%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xiangjiaowangzi.github.io/xjr99721/post/recyclerview%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>View的绘制 onMeasure 开始，如果mLayout是空的，就会调用默认绘制方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 if (mLayout == null) { defaultOnMeasure(widthSpec, heightSpec); return; } ** 默认的绘制方法 void defaultOnMeasure(int</description>
    </item>
    
    <item>
      <title>File存储目录</title>
      <link>https://xiangjiaowangzi.github.io/xjr99721/post/file%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xiangjiaowangzi.github.io/xjr99721/post/file%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/</guid>
      <description>app文件存储有两种： 独立的，这种是不会随着app删除而删除； 专属的，这种是随着app删除而删除； 独立文件 这种我们通常会存储在外置SD卡上，</description>
    </item>
    
    <item>
      <title>动画start分析</title>
      <link>https://xiangjiaowangzi.github.io/xjr99721/post/%E5%8A%A8%E7%94%BB%E7%9A%84start%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 21 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xiangjiaowangzi.github.io/xjr99721/post/%E5%8A%A8%E7%94%BB%E7%9A%84start%E5%88%86%E6%9E%90/</guid>
      <description>动画分为三种： Tween Animation 补间动画 Drawable Animation帧动画 Property Animation 属性动画 补间动画 调用View.startAnimation(animation)开始</description>
    </item>
    
    <item>
      <title>AsynTask源码分析</title>
      <link>https://xiangjiaowangzi.github.io/xjr99721/post/asyntask%E6%BA%90%E7%A0%81/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xiangjiaowangzi.github.io/xjr99721/post/asyntask%E6%BA%90%E7%A0%81/</guid>
      <description>关于Runnable，Callable与FutureTask 本文主要介绍了AsynTask的大致流程 状态 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //</description>
    </item>
    
    <item>
      <title>Binder机制</title>
      <link>https://xiangjiaowangzi.github.io/xjr99721/post/binder%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xiangjiaowangzi.github.io/xjr99721/post/binder%E6%9C%BA%E5%88%B6/</guid>
      <description>Binder跨进程通信机制 Binder机制原理 在Android开发中，我们用到的进程间通信机制（IPC）有：socket、pipe，Bind</description>
    </item>
    
    <item>
      <title>消息处理机制</title>
      <link>https://xiangjiaowangzi.github.io/xjr99721/post/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xiangjiaowangzi.github.io/xjr99721/post/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</guid>
      <description>消息处理机制 简单一句话： Handler获取当前线程中的looper对象，looper用来从存放Message的MessageQueue中取出</description>
    </item>
    
    <item>
      <title>NestedScrolling机制</title>
      <link>https://xiangjiaowangzi.github.io/xjr99721/post/nestedscroll%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xiangjiaowangzi.github.io/xjr99721/post/nestedscroll%E6%9C%BA%E5%88%B6/</guid>
      <description>这个机制是帮助我们处理滚动一些事件的， 但是从源码上我们可以思考，其实更好的说法应该是处理触摸事件，不仅仅滚动 因为其实里面是 子View 在回调给</description>
    </item>
    
    <item>
      <title>View的触摸机制</title>
      <link>https://xiangjiaowangzi.github.io/xjr99721/post/view%E7%9A%84%E8%A7%A6%E6%91%B8%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xiangjiaowangzi.github.io/xjr99721/post/view%E7%9A%84%E8%A7%A6%E6%91%B8%E6%9C%BA%E5%88%B6/</guid>
      <description>在Android中Touch触摸事件主要包括点击（onClick）、长按（onLongClick）、拖拽（onDrag）、滑动（onScro</description>
    </item>
    
    <item>
      <title>Context分析</title>
      <link>https://xiangjiaowangzi.github.io/xjr99721/post/context%E7%B1%BB/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xiangjiaowangzi.github.io/xjr99721/post/context%E7%B1%BB/</guid>
      <description>Context经常称为&amp;rdquo;上下文&amp;rdquo; 关系如图： 可以看出Context只是个抽象类，而实现类则是ContextIml 这里主</description>
    </item>
    
  </channel>
</rss>